'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';

import { Button } from '@/components/ui/button';
import { CardFooter } from '@/components/ui/card';
import { Form } from '@/components/ui/form';
import InputFirstName from '@/components/ui/InputFirstName';
import InputPhoneNumber from '@/components/ui/InputPhoneNumber';

const formSchema = z.object({
  firstName: z
    .string()
    .regex(/^[–ê-–Ø–∞-—èA-Za-z]+$/, { message: '–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã üòä' })
    .min(2, { message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 –±—É–∫–≤—ã üòä' }),
  phone: z
    .string()
    .min(18, { message: '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (999) 123-45-67' }),
});

type FormValues = {
  firstName: string;
  phone: string;
};

export default function FormTelegram() {
  const [submitted, setSubmitted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: { firstName: '', phone: '' },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsSubmitting(true);
    try {
      const res = await fetch('/api/clients', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(values),
      });
      if (res.ok) setSubmitted(true);
      else console.error(await res.json());
    } catch (err) {
      console.error(err);
    } finally {
      setIsSubmitting(false);
    }
  }

  if (submitted) {
    return (
      <div className='p-6 text-center space-y-2 animate-fade-in'>
        <p className='text-lg font-medium'>‚úÖ –°–ø–∞—Å–∏–±–æ!</p>
        <p className='text-gray-600'>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ‚ú®</p>
      </div>
    );
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-6'>
        <InputFirstName<FormValues> control={form.control} name='firstName' />
        <InputPhoneNumber<FormValues> control={form.control} name='phone' />

        <Button className='w-full' type='submit' disabled={isSubmitting}>
          {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : 'üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
        </Button>
      </form>
      <CardFooter>
        <p className='text-sm text-gray-500 text-center'>
          –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤—è–∑–∏. –ù–∏–∫–∞–∫–æ–≥–æ —Å–ø–∞–º–∞ ‚ú®
        </p>
      </CardFooter>
    </Form>
  );
}
