// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователь
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  telegramId    String?
  role          UserRole  @default(TECHNICIAN) // роль пользователя

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  actionLogs      ActionLog[]
  requestsUpdated Request[]   @relation("RequestUpdatedBy")
}

// Клиент
model Client {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String?
  phone      String   @unique
  telegramId String?
  createdAt  DateTime @default(now())

  requests     Request[]
  cars         Car[]
  appointments Appointment[]
}

// Заявка
model Request {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  status RequestStatus @default(NEW)

  // кто последний менял статус
  updatedBy   User?   @relation("RequestUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?

  // история действий
  logs ActionLog[]
}

// История действий
model ActionLog {
  id        Int      @id @default(autoincrement())
  action    String
  createdAt DateTime @default(now())

  request   Request @relation(fields: [requestId], references: [id])
  requestId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// Автомобиль
model Car {
  id        String   @id @default(uuid())
  vin       String   @unique
  plate     String   @unique // госномер
  make      String // марка
  model     String // модель
  createdAt DateTime @default(now())

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  appointments Appointment[]
}

// Запись (Appointment)
model Appointment {
  id      String          @id @default(uuid())
  date    DateTime
  type    AppointmentType
  comment String?

  status AppointmentStatus @default(SCHEDULED) // статус записи

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  car   Car?    @relation(fields: [carId], references: [id])
  carId String?

  createdAt DateTime @default(now())
}

// Роли пользователей
enum UserRole {
  ADMIN // админ
  TECHNICIAN // техник
}

// Тип записи
enum AppointmentType {
  MAINTENANCE // техобслуживание
  DIAGNOSTICS // диагностика
  REPAIR // ремонт
}

// Статусы записи
enum AppointmentStatus {
  SCHEDULED // запланирована (создана запись, дата ещё не наступила)
  CONFIRMED // подтверждена (например, оператор или мастер подтвердил с клиентом)
  IN_PROGRESS // в работе (машина в работе)
  DONE // выполнена (работы выполнены)
  CANCELLED // отменена клиентом или мастером
}

// Статусы заявки на обратный звонок
enum RequestStatus {
  NEW // новая
  IN_PROGRESS // оператор обрабатывает
  CALL_CLIENT // звонок
  DONE // выполнена
  CALLBACK // не дозвонились (перезвонить)
  REJECTION // отказ клиента
  CANCELLED // отменена / спам
}
